"use strict";
(self["webpackChunkapp"] = self["webpackChunkapp"] || []).push([["node_modules_capacitor-community_text-to-speech_dist_esm_web_js"],{

/***/ 5633:
/*!**************************************************************************!*\
  !*** ./node_modules/@capacitor-community/text-to-speech/dist/esm/web.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TextToSpeechWeb": () => (/* binding */ TextToSpeechWeb)
/* harmony export */ });
/* harmony import */ var _home_runner_work_metavoice_metavoice_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 1670);
/* harmony import */ var _capacitor_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @capacitor/core */ 5099);


class TextToSpeechWeb extends _capacitor_core__WEBPACK_IMPORTED_MODULE_1__.WebPlugin {
  constructor() {
    super();
    this.speechSynthesis = null;

    if ('speechSynthesis' in window) {
      this.speechSynthesis = window.speechSynthesis;
      window.addEventListener('beforeunload', () => {
        this.stop();
      });
    }
  }

  speak(options) {
    var _this = this;

    return (0,_home_runner_work_metavoice_metavoice_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (!_this.speechSynthesis) {
        _this.throwUnsupportedError();
      }

      yield _this.stop();
      const speechSynthesis = _this.speechSynthesis;

      const utterance = _this.createSpeechSynthesisUtterance(options);

      return new Promise((resolve, reject) => {
        utterance.onend = () => {
          resolve();
        };

        utterance.onerror = event => {
          reject(event);
        };

        speechSynthesis.speak(utterance);
      });
    })();
  }

  stop() {
    var _this2 = this;

    return (0,_home_runner_work_metavoice_metavoice_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (!_this2.speechSynthesis) {
        _this2.throwUnsupportedError();
      }

      _this2.speechSynthesis.cancel();
    })();
  }

  getSupportedLanguages() {
    var _this3 = this;

    return (0,_home_runner_work_metavoice_metavoice_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const voices = _this3.getSpeechSynthesisVoices();

      const languages = voices.map(voice => voice.lang);
      const filteredLanguages = languages.filter((v, i, a) => a.indexOf(v) == i);
      return {
        languages: filteredLanguages
      };
    })();
  }

  getSupportedVoices() {
    var _this4 = this;

    return (0,_home_runner_work_metavoice_metavoice_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const voices = _this4.getSpeechSynthesisVoices();

      return {
        voices
      };
    })();
  }

  isLanguageSupported(options) {
    var _this5 = this;

    return (0,_home_runner_work_metavoice_metavoice_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const result = yield _this5.getSupportedLanguages();
      const isLanguageSupported = result.languages.includes(options.lang);
      return {
        supported: isLanguageSupported
      };
    })();
  }

  openInstall() {
    var _this6 = this;

    return (0,_home_runner_work_metavoice_metavoice_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this6.throwUnimplementedError();
    })();
  }

  createSpeechSynthesisUtterance(options) {
    const voices = this.getSpeechSynthesisVoices();
    const utterance = new SpeechSynthesisUtterance();
    const {
      text,
      lang,
      rate,
      pitch,
      volume,
      voice
    } = options;

    if (voice) {
      utterance.voice = voices[voice];
    }

    if (volume) {
      utterance.volume = volume >= 0 && volume <= 1 ? volume : 1;
    }

    if (rate) {
      utterance.rate = rate >= 0.1 && rate <= 10 ? rate : 1;
    }

    if (pitch) {
      utterance.pitch = pitch >= 0 && pitch <= 2 ? pitch : 2;
    }

    if (lang) {
      utterance.lang = lang;
    }

    utterance.text = text;
    return utterance;
  }

  getSpeechSynthesisVoices() {
    if (!this.speechSynthesis) {
      this.throwUnsupportedError();
    }

    if (!this.supportedVoices || this.supportedVoices.length < 1) {
      this.supportedVoices = this.speechSynthesis.getVoices();
    }

    return this.supportedVoices;
  }

  throwUnsupportedError() {
    throw this.unavailable('SpeechSynthesis API not available in this browser.');
  }

  throwUnimplementedError() {
    throw this.unimplemented('Not implemented on web.');
  }

}

/***/ })

}]);
//# sourceMappingURL=node_modules_capacitor-community_text-to-speech_dist_esm_web_js.js.map