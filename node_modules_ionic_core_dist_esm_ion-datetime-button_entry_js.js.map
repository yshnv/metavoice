{"version":3,"file":"node_modules_ionic_core_dist_esm_ion-datetime-button_entry_js.js","mappings":"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","sources":["./node_modules/@ionic/core/dist/esm/ion-datetime-button.entry.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, h, H as Host, i as getElement } from './index-8e692445.js';\nimport { b as getIonMode } from './ionic-global-c95cf239.js';\nimport { a as addEventListener, c as componentOnReady } from './helpers-3b390e48.js';\nimport { b as printIonError } from './index-c4b11676.js';\nimport { c as createColorClasses } from './theme-7670341c.js';\nimport { q as parseDate, t as getToday, J as is24Hour, S as getLocalizedDateTime, G as getMonthAndYear, K as getLocalizedTime, T as getMonthDayAndYear } from './data-cb72448c.js';\n\nconst iosDatetimeButtonCss = \":host{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center}:host button{border-radius:8px;padding-left:12px;padding-right:12px;padding-top:6px;padding-bottom:6px;margin-left:2px;margin-right:2px;margin-top:0px;margin-bottom:0px;position:relative;-webkit-transition:150ms color ease-in-out;transition:150ms color ease-in-out;border:none;background:var(--ion-color-step-300, #edeef0);color:var(--ion-text-color, #000);font-family:inherit;font-size:inherit;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;overflow:hidden}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host button{padding-left:unset;padding-right:unset;-webkit-padding-start:12px;padding-inline-start:12px;-webkit-padding-end:12px;padding-inline-end:12px}}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host button{margin-left:unset;margin-right:unset;-webkit-margin-start:2px;margin-inline-start:2px;-webkit-margin-end:2px;margin-inline-end:2px}}:host(.time-active) #time-button,:host(.date-active) #date-button{color:var(--ion-color-base)}:host(.datetime-button-disabled){pointer-events:none}:host(.datetime-button-disabled) button{opacity:0.4}\";\n\nconst mdDatetimeButtonCss = \":host{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center}:host button{border-radius:8px;padding-left:12px;padding-right:12px;padding-top:6px;padding-bottom:6px;margin-left:2px;margin-right:2px;margin-top:0px;margin-bottom:0px;position:relative;-webkit-transition:150ms color ease-in-out;transition:150ms color ease-in-out;border:none;background:var(--ion-color-step-300, #edeef0);color:var(--ion-text-color, #000);font-family:inherit;font-size:inherit;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;overflow:hidden}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host button{padding-left:unset;padding-right:unset;-webkit-padding-start:12px;padding-inline-start:12px;-webkit-padding-end:12px;padding-inline-end:12px}}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host button{margin-left:unset;margin-right:unset;-webkit-margin-start:2px;margin-inline-start:2px;-webkit-margin-end:2px;margin-inline-end:2px}}:host(.time-active) #time-button,:host(.date-active) #date-button{color:var(--ion-color-base)}:host(.datetime-button-disabled){pointer-events:none}:host(.datetime-button-disabled) button{opacity:0.4}\";\n\nconst DatetimeButton = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.datetimeEl = null;\n    this.overlayEl = null;\n    this.datetimePresentation = 'date-time';\n    this.datetimeActive = false;\n    /**\n     * The color to use from your application's color palette.\n     * Default options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\n     * For more information on colors, see [theming](/docs/theming/basics).\n     */\n    this.color = 'primary';\n    /**\n     * If `true`, the user cannot interact with the button.\n     */\n    this.disabled = false;\n    /**\n     * Accepts one or more string values and converts\n     * them to DatetimeParts. This is done so datetime-button\n     * can work with an array internally and not need\n     * to keep checking if the datetime value is `string` or `string[]`.\n     */\n    this.getParsedDateValues = (value) => {\n      // TODO FW-2646 Remove value === ''\n      if (value === '' || value === undefined || value === null) {\n        return [];\n      }\n      if (Array.isArray(value)) {\n        return value;\n      }\n      return [value];\n    };\n    /**\n     * Check the value property on the linked\n     * ion-datetime and then format it according\n     * to the locale specified on ion-datetime.\n     */\n    this.setDateTimeText = () => {\n      const { datetimeEl, datetimePresentation } = this;\n      if (!datetimeEl) {\n        return;\n      }\n      const { value, locale, hourCycle, preferWheel, multiple, titleSelectedDatesFormatter } = datetimeEl;\n      const parsedValues = this.getParsedDateValues(value);\n      /**\n       * Both ion-datetime and ion-datetime-button default\n       * to today's date and time if no value is set.\n       */\n      const parsedDatetimes = parseDate(parsedValues.length > 0 ? parsedValues : [getToday()]);\n      /**\n       * If developers incorrectly use multiple=\"true\"\n       * with non \"date\" datetimes, then just select\n       * the first value so the interface does\n       * not appear broken. Datetime will provide a\n       * warning in the console.\n       */\n      const firstParsedDatetime = parsedDatetimes[0];\n      const use24Hour = is24Hour(locale, hourCycle);\n      // TODO(FW-1865) - Remove once FW-1831 is fixed.\n      parsedDatetimes.forEach((parsedDatetime) => {\n        parsedDatetime.tzOffset = undefined;\n      });\n      this.dateText = this.timeText = undefined;\n      switch (datetimePresentation) {\n        case 'date-time':\n        case 'time-date':\n          const dateText = getMonthDayAndYear(locale, firstParsedDatetime);\n          const timeText = getLocalizedTime(locale, firstParsedDatetime, use24Hour);\n          if (preferWheel) {\n            this.dateText = `${dateText} ${timeText}`;\n          }\n          else {\n            this.dateText = dateText;\n            this.timeText = timeText;\n          }\n          break;\n        case 'date':\n          if (multiple && parsedValues.length !== 1) {\n            let headerText = `${parsedValues.length} days`; // default/fallback for multiple selection\n            if (titleSelectedDatesFormatter !== undefined) {\n              try {\n                headerText = titleSelectedDatesFormatter(parsedValues);\n              }\n              catch (e) {\n                printIonError('Exception in provided `titleSelectedDatesFormatter`: ', e);\n              }\n            }\n            this.dateText = headerText;\n          }\n          else {\n            this.dateText = getMonthDayAndYear(locale, firstParsedDatetime);\n          }\n          break;\n        case 'time':\n          this.timeText = getLocalizedTime(locale, firstParsedDatetime, use24Hour);\n          break;\n        case 'month-year':\n          this.dateText = getMonthAndYear(locale, firstParsedDatetime);\n          break;\n        case 'month':\n          this.dateText = getLocalizedDateTime(locale, firstParsedDatetime, { month: 'long' });\n          break;\n        case 'year':\n          this.dateText = getLocalizedDateTime(locale, firstParsedDatetime, { year: 'numeric' });\n          break;\n      }\n    };\n    /**\n     * Waits for the ion-datetime to re-render.\n     * This is needed in order to correctly position\n     * a popover relative to the trigger element.\n     */\n    this.waitForDatetimeChanges = async () => {\n      const { datetimeEl } = this;\n      if (!datetimeEl) {\n        return Promise.resolve();\n      }\n      return new Promise((resolve) => {\n        addEventListener(datetimeEl, 'ionRender', resolve, { once: true });\n      });\n    };\n    this.handleDateClick = async (ev) => {\n      const { datetimeEl, datetimePresentation } = this;\n      if (!datetimeEl) {\n        return;\n      }\n      let needsPresentationChange = false;\n      /**\n       * When clicking the date button,\n       * we need to make sure that only a date\n       * picker is displayed. For presentation styles\n       * that display content other than a date picker,\n       * we need to update the presentation style.\n       */\n      switch (datetimePresentation) {\n        case 'date-time':\n        case 'time-date':\n          const needsChange = datetimeEl.presentation !== 'date';\n          /**\n           * The date+time wheel picker\n           * shows date and time together,\n           * so do not adjust the presentation\n           * in that case.\n           */\n          if (!datetimeEl.preferWheel && needsChange) {\n            datetimeEl.presentation = 'date';\n            needsPresentationChange = true;\n          }\n          break;\n      }\n      /**\n       * Track which button was clicked\n       * so that it can have the correct\n       * activated styles applied when\n       * the modal/popover containing\n       * the datetime is opened.\n       */\n      this.selectedButton = 'date';\n      this.presentOverlay(ev, needsPresentationChange, this.dateTargetEl);\n    };\n    this.handleTimeClick = (ev) => {\n      const { datetimeEl, datetimePresentation } = this;\n      if (!datetimeEl) {\n        return;\n      }\n      let needsPresentationChange = false;\n      /**\n       * When clicking the time button,\n       * we need to make sure that only a time\n       * picker is displayed. For presentation styles\n       * that display content other than a time picker,\n       * we need to update the presentation style.\n       */\n      switch (datetimePresentation) {\n        case 'date-time':\n        case 'time-date':\n          const needsChange = datetimeEl.presentation !== 'time';\n          if (needsChange) {\n            datetimeEl.presentation = 'time';\n            needsPresentationChange = true;\n          }\n          break;\n      }\n      /**\n       * Track which button was clicked\n       * so that it can have the correct\n       * activated styles applied when\n       * the modal/popover containing\n       * the datetime is opened.\n       */\n      this.selectedButton = 'time';\n      this.presentOverlay(ev, needsPresentationChange, this.timeTargetEl);\n    };\n    /**\n     * If the datetime is presented in an\n     * overlay, the datetime and overlay\n     * should be appropriately sized.\n     * These classes provide default sizing values\n     * that developers can customize.\n     * The goal is to provide an overlay that is\n     * reasonably sized with a datetime that\n     * fills the entire container.\n     */\n    this.presentOverlay = async (ev, needsPresentationChange, triggerEl) => {\n      const { overlayEl } = this;\n      if (!overlayEl) {\n        return;\n      }\n      if (overlayEl.tagName === 'ION-POPOVER') {\n        /**\n         * When the presentation on datetime changes,\n         * we need to wait for the component to re-render\n         * otherwise the computed width/height of the\n         * popover content will be wrong, causing\n         * the popover to not align with the trigger element.\n         */\n        if (needsPresentationChange) {\n          await this.waitForDatetimeChanges();\n        }\n        /**\n         * We pass the trigger button element\n         * so that the popover aligns with the individual\n         * button that was clicked, not the component container.\n         */\n        overlayEl.present(Object.assign(Object.assign({}, ev), { detail: {\n            ionShadowTarget: triggerEl,\n          } }));\n      }\n      else {\n        overlayEl.present();\n      }\n    };\n  }\n  async componentWillLoad() {\n    const { datetime } = this;\n    if (!datetime) {\n      printIonError('An ID associated with an ion-datetime instance is required for ion-datetime-button to function properly.', this.el);\n      return;\n    }\n    const datetimeEl = (this.datetimeEl = document.getElementById(datetime));\n    if (!datetimeEl) {\n      printIonError(`No ion-datetime instance found for ID '${datetime}'.`, this.el);\n      return;\n    }\n    /**\n     * Since the datetime can be used in any context (overlays, accordion, etc)\n     * we track when it is visible to determine when it is active.\n     * This informs which button is highlighted as well as the\n     * aria-expanded state.\n     */\n    const io = new IntersectionObserver((entries) => {\n      const ev = entries[0];\n      this.datetimeActive = ev.isIntersecting;\n    }, {\n      threshold: 0.01,\n    });\n    io.observe(datetimeEl);\n    /**\n     * Get a reference to any modal/popover\n     * the datetime is being used in so we can\n     * correctly size it when it is presented.\n     */\n    const overlayEl = (this.overlayEl = datetimeEl.closest('ion-modal, ion-popover'));\n    /**\n     * The .ion-datetime-button-overlay class contains\n     * styles that allow any modal/popover to be\n     * sized according to the dimensions of the datetime.\n     * If developers want a smaller/larger overlay all they need\n     * to do is change the width/height of the datetime.\n     * Additionally, this lets us avoid having to set\n     * explicit widths on each variant of datetime.\n     */\n    if (overlayEl) {\n      overlayEl.classList.add('ion-datetime-button-overlay');\n    }\n    componentOnReady(datetimeEl, () => {\n      const datetimePresentation = (this.datetimePresentation = datetimeEl.presentation || 'date-time');\n      /**\n       * Set the initial display\n       * in the rendered buttons.\n       *\n       * From there, we need to listen\n       * for ionChange to be emitted\n       * from datetime so we know when\n       * to re-render the displayed\n       * text in the buttons.\n       */\n      this.setDateTimeText();\n      addEventListener(datetimeEl, 'ionChange', this.setDateTimeText);\n      /**\n       * Configure the initial selected button\n       * in the event that the datetime is displayed\n       * without clicking one of the datetime buttons.\n       * For example, a datetime could be expanded\n       * in an accordion. In this case users only\n       * need to click the accordion header to show\n       * the datetime.\n       */\n      switch (datetimePresentation) {\n        case 'date-time':\n        case 'date':\n        case 'month-year':\n        case 'month':\n        case 'year':\n          this.selectedButton = 'date';\n          break;\n        case 'time-date':\n        case 'time':\n          this.selectedButton = 'time';\n          break;\n      }\n    });\n  }\n  render() {\n    const { color, dateText, timeText, selectedButton, datetimeActive, disabled } = this;\n    const mode = getIonMode(this);\n    return (h(Host, { class: createColorClasses(color, {\n        [mode]: true,\n        [`${selectedButton}-active`]: datetimeActive,\n        ['datetime-button-disabled']: disabled,\n      }) }, dateText && (h(\"button\", { class: \"ion-activatable\", id: \"date-button\", \"aria-expanded\": datetimeActive ? 'true' : 'false', onClick: this.handleDateClick, disabled: disabled, part: \"native\", ref: (el) => (this.dateTargetEl = el) }, h(\"slot\", { name: \"date-target\" }, dateText), mode === 'md' && h(\"ion-ripple-effect\", null))), timeText && (h(\"button\", { class: \"ion-activatable\", id: \"time-button\", \"aria-expanded\": datetimeActive ? 'true' : 'false', onClick: this.handleTimeClick, disabled: disabled, part: \"native\", ref: (el) => (this.timeTargetEl = el) }, h(\"slot\", { name: \"time-target\" }, timeText), mode === 'md' && h(\"ion-ripple-effect\", null)))));\n  }\n  get el() { return getElement(this); }\n};\nDatetimeButton.style = {\n  ios: iosDatetimeButtonCss,\n  md: mdDatetimeButtonCss\n};\n\nexport { DatetimeButton as ion_datetime_button };\n"],"names":["r","registerInstance","h","H","Host","i","getElement","b","getIonMode","a","addEventListener","c","componentOnReady","printIonError","createColorClasses","q","parseDate","t","getToday","J","is24Hour","S","getLocalizedDateTime","G","getMonthAndYear","K","getLocalizedTime","T","getMonthDayAndYear","iosDatetimeButtonCss","mdDatetimeButtonCss","DatetimeButton","constructor","hostRef","datetimeEl","overlayEl","datetimePresentation","datetimeActive","color","disabled","getParsedDateValues","value","undefined","Array","isArray","setDateTimeText","locale","hourCycle","preferWheel","multiple","titleSelectedDatesFormatter","parsedValues","parsedDatetimes","length","firstParsedDatetime","use24Hour","forEach","parsedDatetime","tzOffset","dateText","timeText","headerText","e","month","year","waitForDatetimeChanges","Promise","resolve","once","handleDateClick","ev","needsPresentationChange","needsChange","presentation","selectedButton","presentOverlay","dateTargetEl","handleTimeClick","timeTargetEl","triggerEl","tagName","present","Object","assign","detail","ionShadowTarget","componentWillLoad","datetime","el","document","getElementById","io","IntersectionObserver","entries","isIntersecting","threshold","observe","closest","classList","add","render","mode","class","id","onClick","part","ref","name","style","ios","md","ion_datetime_button"],"sourceRoot":"webpack:///","x_google_ignoreList":[0]}